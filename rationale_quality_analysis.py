import argparse
import pandas as pd
from globals import MODEL_CONFIGS
from support_contrastiveness_analysis import support_contr_analysis_all_datasets
from Visual_Fidelity_analysis import VF_analysis_all_datasets
from commonsense_analysis import commonsense_analysis_all_datasets
from informativeness_analysis import informativeness_analysis_all_datasets

def main():
    parser = argparse.ArgumentParser(
        description="Analyze the quality of rationales generated by VLMs."
    )
    parser.add_argument(
        "--dataset",
        type=str,
        required=True,
        choices=["AOKVQA", "VizWiz", "both"],
        help="Dataset to process: AOKVQA, VizWiz, or both."
    )
    parser.add_argument(
        "--quality",
        type=str,
        required=True,
        choices=["support", "visual_fidelity", "informativeness", "commonsense", "all"],
        help="Type of quality analysis to perform: support (with contrastiveness), visual_fidelity, informativeness, commonsense plausibility, or all of them."
    )
    parser.add_argument(
        "--test",
        action="store_true",
        help="Run the analysis on the test set."
    )
    args = parser.parse_args()
    
    datasets_folder = "model_outputs"
    model_list = ["llava-v1.5-7b", "qwen2.5-vl-7b-instruct", "gpt-4o-2024-05-13"]
    datasets_types = []
    if args.dataset in ["AOKVQA", "both"]:
        datasets_types.append("AOKVQA")
    if args.dataset in ["VizWiz", "both"]:
        datasets_types.append("VizWiz")
    
    for dataset_type in datasets_types:
        dataset_list = []
        for model in model_list:
            if args.test:
                dataset_list.append(pd.read_csv(f"{datasets_folder}/{dataset_type}/{model}_test.csv"))
            else:
                dataset_list.append(pd.read_csv(f"{datasets_folder}/{dataset_type}/{model}.csv"))
        if args.quality == "support" or args.quality == "all":
            support_contr_analysis_all_datasets("question", "predicted_answer", "majority_answer", "choices", "rationale", dataset_list, overwrite_candidate_answers=False)
            for i, dataset in enumerate(dataset_list):
                if args.test:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}_test.csv", index=False)
                else:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}.csv", index=False)
        if args.quality == "informativeness" or args.quality == "all":
            informativeness_analysis_all_datasets("rationale", dataset_list)
            for i, dataset in enumerate(dataset_list):
                if args.test:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}_test.csv", index=False)
                else:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}.csv", index=False)
        if args.quality == "visual_fidelity" or args.quality == "all":
            VF_analysis_all_datasets("rationale", dataset_list, dataset_type)
            for i, dataset in enumerate(dataset_list):
                if args.test:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}_test.csv", index=False)
                else:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}.csv", index=False)
        if args.quality == "commonsense" or args.quality == "all":
            commonsense_analysis_all_datasets("rationale", dataset_list)
            for i, dataset in enumerate(dataset_list):
                if args.test:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}_test.csv", index=False)
                else:
                    dataset.to_csv(f"{datasets_folder}/{dataset_type}/{model_list[i]}.csv", index=False)
    

if __name__ == '__main__':
    main()